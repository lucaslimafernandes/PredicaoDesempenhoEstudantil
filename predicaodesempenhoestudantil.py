# -*- coding: utf-8 -*-
"""PredicaoDesempenhoEstudantil.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BdlgI6_HO1-VrHct1Zb4hXULbrclPUX3

Importação do dataset
"""

###########################
import os

import pandas as pd
import kagglehub

# Download latest version
path = kagglehub.dataset_download("rabieelkharoua/students-performance-dataset")

print("Path to dataset files:", path)

files = os.listdir(path)
print(files)

# Dados
# df = pd.read_csv("datasets/Student_performance_data_.csv")
df = pd.read_csv(f"{path}/Student_performance_data _.csv")

print(df.head())

# show columns
print(df.columns)

# Index(['StudentID', 'Age', 'Gender', 'Ethnicity', 'ParentalEducation',
#        'StudyTimeWeekly', 'Absences', 'Tutoring', 'ParentalSupport',
#        'Extracurricular', 'Sports', 'Music', 'Volunteering', 'GPA',
#        'GradeClass'],
#       dtype='object')


# Mapeamento das notas numéricas/conceitos
mapping = {
    0: 'A',  # GPA >= 3.5
    1: 'B',  # 3.0 <= GPA < 3.5
    2: 'C',  # 2.5 <= GPA < 3.0
    3: 'D',  # 2.0 <= GPA < 2.5
    4: 'F',  # GPA < 2.0
}

# Transformando a GradeClass em conceitos (A,B,..,F)
# E transformando em avaliação binária, entre bom/ruim - 1 ou 0
df['GradeClassLetter'] = df['GradeClass'].astype(int).map(mapping)
df['GradeBinary'] = df['GradeClass'].apply(lambda x: 1 if x in [0, 1, 2] else 0)

# Impressão de valores únicos e/nulos
for column in df.columns:

    print(f"Coluna: {column}")

    uniques = df[column].unique()
    print("  Únicos:", uniques)

    null_count = df[column].isnull().sum()
    print("  Nulos:", null_count)

    # se for coluna de strings (object), conta '' e '   '
    if df[column].dtype == object:
        # exatas ''
        empty_str_count = (df[column] == '').sum()
        # só espaços (strip=='')
        blank_space_count = df[column].astype(str).str.strip().eq('').sum() - empty_str_count
        print("  Strings vazias (''):", empty_str_count)
        print("  Apenas espaços:", blank_space_count)

    print("-" * 40)

"""BoxPlot para verificação de outliers"""

import seaborn as sns
import matplotlib.pyplot as plt

print(df.describe())

for coluna in df.columns:
    sns.boxplot(x=df[coluna])
    plt.title(f'Boxplot de {coluna}')
    plt.show()

"""Importação das bibliotecas"""

import pandas as pd
from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
from sklearn.metrics import f1_score, precision_score, recall_score, accuracy_score, classification_report, ConfusionMatrixDisplay

from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import TomekLinks

# Modelos
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC

# SHAP
import shap
import matplotlib.pyplot as plt

# =====================
# 1. Dados
# =====================
# df = pd.read_csv("datasets/Student_performance_data_.csv")

X = df.drop(columns=["StudentID", "GradeClass", "GPA", "GradeClassLetter", "GradeBinary"], errors='ignore')
y = df['GradeBinary']


# =====================
# 2. Split: treino, validação, teste
# =====================
X_temp, X_test, y_temp, y_test = train_test_split(X, y, stratify=y, test_size=0.2, random_state=42)
X_train, X_val, y_train, y_val = train_test_split(X_temp, y_temp, stratify=y_temp, test_size=0.25, random_state=42)

# =====================
# 3. Balanceamento no treino
# =====================
smote = SMOTE(random_state=42)
X_smote, y_smote = smote.fit_resample(X_train, y_train)

tomek = TomekLinks()
X_final, y_final = tomek.fit_resample(X_smote, y_smote)

# =====================
# 4. Modelos e parâmetros
# =====================
models_and_params = {
    "RandomForest": [
        RandomForestClassifier(random_state=42),
        {
            'clf__n_estimators': [100, 200],
            'clf__criterion': ['gini', 'entropy', 'log_loss'],
            'clf__max_depth': [None, 5, 10, 20],
            'clf__min_samples_split': [2, 5],
            'clf__min_samples_leaf': [1, 2]
        }
    ],
    "KNN": [
        KNeighborsClassifier(),
        {
            'clf__n_neighbors': [3, 5, 7, 10],
            'clf__weights': ['uniform', 'distance'],
            'clf__leaf_size': [10, 20, 30],
            'clf__p': [1, 2]
        }
    ],
    "SVC": [
        SVC(probability=True, random_state=42),
        {
            'clf__C': [0.1, 1, 10],
            'clf__kernel': ['linear', 'rbf', 'poly'],
            'clf__gamma': ['scale', 'auto']
        }
    ],
    "AdaBoost": [
        AdaBoostClassifier(random_state=42),
        {
            'clf__n_estimators': [20, 50, 100, 200],
            'clf__learning_rate': [0.5, 1.0, 1.5]
        }
    ],
    "LogisticRegression": [
        LogisticRegression(max_iter=1000, random_state=42),
        {
            'clf__C': [0.01, 0.1, 1, 10],
            'clf__penalty': ['l2'],
            'clf__solver': ['lbfgs']
        }
    ],
    "DecisionTree": [
        DecisionTreeClassifier(random_state=42),
        {
            'clf__max_depth': [None, 5, 10, 20],
            'clf__min_samples_split': [2, 5],
            'clf__criterion': ['gini', 'entropy']
        }
    ]
}

# =====================
# 5. Avaliação
# =====================
cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)
f1_macro = lambda est, X, y: f1_score(y, est.predict(X), average='macro')

results = []

def avaliar(modelo, X, y, nome):
    pred = modelo.predict(X)
    return {
        f"Accuracy_{nome}": accuracy_score(y, pred),
        f"Recall_{nome}": recall_score(y, pred),
        f"Precision_{nome}": precision_score(y, pred),
        f"F1-score_{nome}": f1_score(y, pred)
    }

for name, (model, param_grid) in models_and_params.items():
    print(f"\n=== GridSearchCV para {name} ===")
    pipe = Pipeline([
        ('scaler', MinMaxScaler()),
        ('clf', model)
    ])

    grid = GridSearchCV(pipe, param_grid, cv=cv, scoring='f1_macro', n_jobs=-1)
    grid.fit(X_final, y_final)

    best_estimator = grid.best_estimator_

    resultado = {
        "Modelo": name,
        "BestParams": grid.best_params_,
        "F1_CV": grid.best_score_
    }
    resultado.update(avaliar(best_estimator, X_train, y_train, "Treino"))
    resultado.update(avaliar(best_estimator, X_val, y_val, "Validacao"))
    resultado.update(avaliar(best_estimator, X_test, y_test, "Teste"))

    results.append(resultado)

# =====================
# 6. Exibir resultados
# =====================
df_resultados = pd.DataFrame(results).sort_values(by="F1-score_Teste", ascending=False)
df_resultados.to_csv("resultados.csv")
print("\nResumo dos modelos:")
print(df_resultados)

best_params_svc = df_resultados[df_resultados["Modelo"] == "SVC"]["BestParams"].values[0]
print(best_params_svc)

df_resultados.to_csv("resultados_modelos.csv")

# =====================
# 7. SHAP com o melhor modelo
# =====================
melhor_modelo_nome = df_resultados.iloc[0]["Modelo"]
print(f"\n=== Análise SHAP para o melhor modelo: {melhor_modelo_nome} ===")

melhor_modelo = [r for r in results if r['Modelo'] == melhor_modelo_nome][0]
final_model = grid.best_estimator_.named_steps['clf']

X_sample = X_test.copy()
explainer = shap.TreeExplainer(final_model)
shap_values = explainer.shap_values(X_sample)

# Extrair a classe positiva corretamente (classe 1)
if isinstance(shap_values, list):
    shap_class1 = shap_values[1]
elif len(shap_values.shape) == 3:
    shap_class1 = shap_values[:, :, 1]
else:
    shap_class1 = shap_values

# Garante que shapes batem
assert shap_class1.shape == X_sample.shape

# Plota
shap.summary_plot(shap_class1, X_sample, feature_names=X_sample.columns)
plt.tight_layout()
plt.savefig("shap_summary_plot_class1.png", dpi=300)

shap.summary_plot(shap_class1, X_sample, feature_names=X_sample.columns, plot_type="bar")
plt.tight_layout()
plt.savefig("shap_bar_plot_class1.png", dpi=300)

"""Modelo Final"""

# =====================
# 4. Modelo SVC com hiperparâmetros ótimos
# =====================

# {'clf__C': 10, 'clf__gamma': 'auto', 'clf__kernel': 'rbf'}
# params = {
#     'clf__C': 10,
#     'clf__gamma': 'auto',
#     'clf__kernel': 'rbf'
# }
params = best_params_svc

pipe = Pipeline([
    ('scaler', MinMaxScaler()),
    ('clf', SVC(random_state=42))
])
pipe.set_params(**params)

# Treinamento
pipe.fit(X_final, y_final)

# =====================
# 5. Avaliação no teste
# =====================
y_pred = pipe.predict(X_test)

acc = accuracy_score(y_test, y_pred)
rec = recall_score(y_test, y_pred)
prec = precision_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print("\n=== AVALIAÇÃO NO CONJUNTO DE TESTE ===")
print(f"Accuracy : {acc:.4f}")
print(f"Recall   : {rec:.4f}")
print(f"Precision: {prec:.4f}")
print(f"F1-score : {f1:.4f}")
print("\nRelatório completo:")
print(classification_report(y_test, y_pred))

ConfusionMatrixDisplay.from_predictions(y_test, y_pred)
plt.title("Matriz de Confusão - SVC")
plt.tight_layout()
plt.savefig("confusion_matrix_svc.png", dpi=300)
plt.show()